---
description: 
globs: 
alwaysApply: true
---
# AGENT.md – **Enterprise MCP Payments Server** (Model Context Protocol v2024.1)

> **Purpose**: Production-ready MCP server blueprint for CodeX agents to generate, deploy, and maintain a comprehensive payments backend with enterprise-grade reliability, security, and observability.

---

## 1. Executive Mission & SLA Requirements

| Metric | Target | Measurement |
|--------|--------|-------------|
| **Availability** | 99.995% | ≤ 21 minutes annual downtime |
| **Performance** | p95 < 150ms, p99 < 300ms | Internal API latency |
| **Throughput** | 10K+ TPS | Peak transaction processing |
| **Security** | PCI-DSS SAQ-A | Compliance audit passing |
| **Recovery** | RTO < 15min, RPO < 5min | Disaster recovery metrics |

---

## 2. MCP Server Architecture Overview

```mermaid
graph TB
    subgraph "MCP Server Layer"
        MCP[MCP Protocol Handler]
        TOOLS[Payment Tools Registry]
        SCHEMA[JSON Schema Validator]
    end
    
    subgraph "Business Logic Layer"
        AUTH[Authentication Service]
        PAY[Payment Processing]
        WAL[Wallet Management]
        SUB[Subscription Engine]
        AUD[Audit & Compliance]
        NOTIF[Notification Hub]
    end
    
    subgraph "Data & Integration Layer"
        CACHE[(Redis Cluster)]
        PRIDB[(PostgreSQL HA)]
        DOCDB[(MongoDB Atlas)]
        QUEUE[RabbitMQ Cluster]
        VAULT[HashiCorp Vault]
    end
    
    subgraph "External Integrations"
        STRIPE[Stripe Connect]
        RAZOR[Razorpay]
        UPI[UPI Gateway]
        BANK[Bank APIs]
        KYC[KYC Providers]
    end
    
    MCP --> TOOLS
    TOOLS --> AUTH
    TOOLS --> PAY
    TOOLS --> WAL
    TOOLS --> SUB
    PAY --> STRIPE
    PAY --> RAZOR
    PAY --> UPI
    PAY --> BANK
    AUTH --> VAULT
    PAY --> PRIDB
    PAY --> CACHE
    PAY --> QUEUE
    AUD --> DOCDB
    WAL --> KYC
```

---

## 3. MCP Server Specification

### 3.1 Protocol Implementation
```python
# MCP Server Configuration
MCP_VERSION = "2024.1"
SERVER_NAME = "enterprise-payments"
SERVER_VERSION = "1.0.0"

# Required MCP capabilities
CAPABILITIES = {
    "tools": True,
    "resources": True,
    "prompts": False,  # Not needed for payment server
    "logging": True,
    "sampling": False
}
```

### 3.2 Tool Registry Schema
```yaml
tools:
  - name: "create_payment"
    description: "Initialize payment transaction with provider"
    inputSchema:
      type: "object"
      properties:
        amount: {type: "number", minimum: 0.01}
        currency: {type: "string", enum: ["USD", "EUR", "INR", "GBP"]}
        method: {type: "string", enum: ["card", "bank", "wallet", "upi"]}
        customer_id: {type: "string", format: "uuid"}
        idempotency_key: {type: "string", minLength: 16}
      required: ["amount", "currency", "method", "customer_id", "idempotency_key"]
      
  - name: "verify_payment"
    description: "Verify payment status and update transaction state"
    
  - name: "refund_payment"
    description: "Process payment refund with audit trail"
    
  - name: "get_wallet_balance"
    description: "Retrieve current wallet balance for user"
    
  - name: "transfer_funds"
    description: "Execute P2P or merchant transfer"
```

---

## 4. Technology Stack & Rationale

| Component | Technology | Justification | Configuration |
|-----------|------------|---------------|---------------|
| **MCP Runtime** | Python 3.11+ | Native async support, rich ecosystem | uvloop, asyncio |
| **Web Framework** | FastAPI + Uvicorn | OpenAPI generation, async-first | Gunicorn in production |
| **Database** | PostgreSQL 15+ | ACID compliance, JSON support | Read replicas, connection pooling |
| **Cache** | Redis 7+ | Sub-millisecond latency | Cluster mode, persistence |
| **Message Queue** | RabbitMQ 3.12+ | Guaranteed delivery, dead letters | HA cluster, mirrored queues |
| **Secrets** | HashiCorp Vault | Dynamic secrets, rotation | Transit encryption, PKI |
| **Observability** | OTEL + Prometheus | Vendor-neutral, comprehensive | Grafana, Jaeger, Loki |

---

## 5. Project Structure (Generated by Agent)

```
payment-mcp-server/
├── app/                          # Main application package
│   ├── __init__.py
│   ├── main.py                   # MCP server entry point
│   ├── config/
│   │   ├── settings.py           # Environment-based config
│   │   └── logging.py            # Structured logging setup
│   ├── mcp/
│   │   ├── server.py             # MCP protocol handler
│   │   ├── tools/                # Payment tool implementations
│   │   │   ├── payments.py
│   │   │   ├── wallets.py
│   │   │   ├── subscriptions.py
│   │   │   └── compliance.py
│   │   └── schemas.py            # JSON schemas for validation
│   ├── services/                 # Business logic layer
│   │   ├── auth_service.py
│   │   ├── payment_service.py
│   │   ├── wallet_service.py
│   │   ├── notification_service.py
│   │   └── audit_service.py
│   ├── repositories/             # Data access layer
│   │   ├── base.py
│   │   ├── payment_repo.py
│   │   ├── wallet_repo.py
│   │   └── user_repo.py
│   ├── models/                   # SQLAlchemy models
│   │   ├── payment.py
│   │   ├── wallet.py
│   │   ├── user.py
│   │   └── audit.py
│   ├── integrations/             # External service connectors
│   │   ├── stripe_client.py
│   │   ├── razorpay_client.py
│   │   ├── upi_client.py
│   │   └── kyc_client.py
│   └── utils/
│       ├── encryption.py
│       ├── idempotency.py
│       ├── rate_limiting.py
│       └── monitoring.py
├── tests/                        # Comprehensive test suite
│   ├── unit/
│   ├── integration/
│   ├── e2e/
│   └── fixtures/
├── ops/                          # Infrastructure as Code
│   ├── terraform/                # Cloud infrastructure
│   ├── kubernetes/               # K8s manifests
│   ├── docker/                   # Container definitions
│   └── monitoring/               # Observability stack
├── scripts/                      # Automation scripts
│   ├── setup.py                  # Initial setup
│   ├── migrate.py                # Database migrations
│   └── load_test.py              # Performance testing
├── docs/                         # Architecture documentation
│   ├── api.md                    # API documentation
│   ├── deployment.md             # Deployment guide
│   └── security.md               # Security considerations
├── requirements/                 # Dependencies
│   ├── base.txt
│   ├── dev.txt
│   └── prod.txt
├── pyproject.toml                # Project configuration
├── Dockerfile                    # Production container
├── docker-compose.yml            # Local development
└── README.md                     # Quick start guide
```

---

## 6. Code Generation Directives

### 6.1 MCP Server Implementation Rules
1. **Protocol Compliance**: Implement MCP protocol exactly per specification
2. **Tool Registration**: Each payment function as separate MCP tool
3. **Error Handling**: Return structured MCP error responses
4. **Schema Validation**: Validate all inputs against JSON schemas
5. **Async Operations**: All I/O operations must be async
6. **Idempotency**: Implement idempotency for all state-changing operations
7. **Audit Trail**: Log all operations with correlation IDs
8. **Type Safety**: Full type hints with Pydantic v2 models

### 6.2 Code Quality Standards
```python
# Example function signature template
async def create_payment(
    amount: Decimal,
    currency: CurrencyCode,
    method: PaymentMethod,
    customer_id: UUID,
    idempotency_key: str,
    metadata: Optional[Dict[str, Any]] = None
) -> PaymentResult:
    """
    Create a new payment transaction.
    
    Args:
        amount: Payment amount (must be > 0)
        currency: ISO 4217 currency code
        method: Payment method identifier
        customer_id: Unique customer identifier
        idempotency_key: Unique request identifier
        metadata: Optional transaction metadata
        
    Returns:
        PaymentResult with transaction details
        
    Raises:
        ValidationError: Invalid input parameters
        PaymentError: Payment processing failure
        DuplicateError: Duplicate idempotency key
    """
```

### 6.3 Testing Requirements
- **Unit Tests**: ≥90% code coverage with pytest
- **Integration Tests**: End-to-end MCP tool testing
- **Load Tests**: Handle 10K+ concurrent requests
- **Security Tests**: OWASP ZAP scanning
- **Compliance Tests**: PCI-DSS validation

---

## 7. Environment Configuration

### 7.1 Required Environment Variables
```yaml
# Core MCP Server
MCP_SERVER_HOST: "0.0.0.0"
MCP_SERVER_PORT: 8000
MCP_LOG_LEVEL: "INFO"

# Database Configuration
DATABASE_URL: "postgresql+asyncpg://user:pass@db:5432/payments"
DATABASE_POOL_SIZE: 20
DATABASE_MAX_OVERFLOW: 30

# Redis Configuration
REDIS_URL: "redis://cache:6379/0"
REDIS_POOL_SIZE: 10

# Message Queue
RABBITMQ_URL: "amqp://user:pass@rabbitmq:5672/"
RABBITMQ_EXCHANGE: "payments"

# Security
JWT_SECRET_KEY: "${vault:secret/jwt#key}"
ENCRYPTION_KEY: "${vault:secret/encryption#key}"
API_RATE_LIMIT: "1000/hour"

# Payment Providers
STRIPE_API_KEY: "${vault:secret/stripe#api_key}"
STRIPE_WEBHOOK_SECRET: "${vault:secret/stripe#webhook_secret}"
RAZORPAY_KEY_ID: "${vault:secret/razorpay#key_id}"
RAZORPAY_KEY_SECRET: "${vault:secret/razorpay#key_secret}"

# Monitoring
OTEL_EXPORTER_OTLP_ENDPOINT: "http://jaeger:4317"
PROMETHEUS_METRICS_PORT: 9090
```

---

## 8. API Specifications & Examples

### 8.1 MCP Tool: Create Payment
```json
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/call",
  "params": {
    "name": "create_payment",
    "arguments": {
      "amount": 100.00,
      "currency": "USD",
      "method": "card",
      "customer_id": "cust_1234567890",
      "idempotency_key": "idem_abcd1234efgh5678",
      "metadata": {
        "order_id": "order_123",
        "description": "Premium subscription"
      }
    }
  }
}
```

### 8.2 Response Format
```json
{
  "jsonrpc": "2.0",
  "id": 1,
  "result": {
    "content": [
      {
        "type": "text",
        "text": "Payment created successfully"
      }
    ],
    "isError": false,
    "_meta": {
      "payment_id": "pay_1234567890",
      "status": "pending",
      "provider": "stripe",
      "created_at": "2024-01-15T10:30:00Z",
      "expires_at": "2024-01-15T10:45:00Z"
    }
  }
}
```

---

## 9. Security Implementation Requirements

### 9.1 Authentication & Authorization
```python
# JWT-based authentication with role-based access
SECURITY_HEADERS = {
    "X-Content-Type-Options": "nosniff",
    "X-Frame-Options": "DENY",
    "X-XSS-Protection": "1; mode=block",
    "Strict-Transport-Security": "max-age=31536000; includeSubDomains"
}

# API rate limiting
RATE_LIMITS = {
    "anonymous": "100/hour",
    "authenticated": "1000/hour",
    "premium": "5000/hour"
}
```

### 9.2 PCI Compliance Measures
- **Data Encryption**: AES-256 for PII at rest
- **Network Security**: TLS 1.3 for all communications
- **Access Control**: Multi-factor authentication required
- **Audit Logging**: Immutable audit trail in separate database
- **Vulnerability Management**: Weekly security scans

---

## 10. DevOps & Deployment Pipeline

### 10.1 Containerization
```dockerfile
# Multi-stage production Dockerfile
FROM python:3.11-slim as builder
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

WORKDIR /app
COPY requirements/ requirements/
RUN pip install --user -r requirements/prod.txt

FROM python:3.11-slim as runtime
ENV PATH="/home/app/.local/bin:$PATH"
RUN useradd --create-home --shell /bin/bash app
USER app
WORKDIR /home/app
COPY --from=builder /root/.local /home/app/.local
COPY --chown=app:app app/ ./app/

EXPOSE 8000
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s \
  CMD curl -f http://localhost:8000/health || exit 1

CMD ["python", "-m", "app.main"]
```

### 10.2 CI/CD Pipeline
```yaml
# GitHub Actions workflow
name: Deploy MCP Payments Server
on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements/dev.txt
      - name: Run tests
        run: |
          pytest --cov=app --cov-report=xml
          bandit -r app/
          mypy app/
      - name: Upload coverage
        uses: codecov/codecov-action@v3

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster production \
            --service mcp-payments \
            --force-new-deployment
```

---

## 11. Monitoring & Observability Stack

### 11.1 Metrics Collection
```python
# Prometheus metrics definitions
from prometheus_client import Counter, Histogram, Gauge

PAYMENT_COUNTER = Counter(
    'payments_total',
    'Total number of payments processed',
    ['method', 'currency', 'status']
)

PAYMENT_DURATION = Histogram(
    'payment_duration_seconds',
    'Time spent processing payments',
    ['method', 'provider']
)

WALLET_BALANCE = Gauge(
    'wallet_balance_total',
    'Current wallet balances',
    ['currency', 'user_type']
)
```

### 11.2 Distributed Tracing
```python
# OpenTelemetry configuration
from opentelemetry import trace
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor

# Auto-instrumentation for FastAPI, SQLAlchemy, Redis
OTEL_INSTRUMENTATION = [
    "fastapi",
    "sqlalchemy",
    "redis",
    "requests",
    "psycopg2"
]
```

---

## 12. Testing Strategy & Quality Gates

### 12.1 Test Pyramid
```python
# Unit Test Example
@pytest.mark.asyncio
async def test_create_payment_success():
    """Test successful payment creation."""
    service = PaymentService(mock_repo, mock_provider)
    result = await service.create_payment(
        amount=Decimal("100.00"),
        currency="USD",
        method="card",
        customer_id=UUID("12345678-1234-5678-9012-123456789012"),
        idempotency_key="test_key_123"
    )
    assert result.status == PaymentStatus.PENDING
    assert result.amount == Decimal("100.00")
```

### 12.2 Load Testing
```python
# Locust load test configuration
class PaymentUser(HttpUser):
    wait_time = between(1, 3)
    
    @task(3)
    def create_payment(self):
        self.client.post("/mcp/tools/call", json={
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/call",
            "params": {
                "name": "create_payment",
                "arguments": {
                    "amount": 100.00,
                    "currency": "USD",
                    "method": "card",
                    "customer_id": str(uuid4()),
                    "idempotency_key": str(uuid4())
                }
            }
        })
    
    @task(1)
    def get_wallet_balance(self):
        self.client.post("/mcp/tools/call", json={
            "jsonrpc": "2.0",
            "id": 2,
            "method": "tools/call",
            "params": {
                "name": "get_wallet_balance",
                "arguments": {
                    "customer_id": str(uuid4())
                }
            }
        })
```

---

## 13. Disaster Recovery & Business Continuity

### 13.1 Backup Strategy
- **Database**: Point-in-time recovery with 15-minute intervals
- **Configuration**: Version-controlled in Git with encryption
- **Secrets**: Automated rotation with Vault
- **Logs**: 7-year retention for compliance

### 13.2 Failover Procedures
```yaml
# Kubernetes deployment with automatic failover
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-payments-server
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    spec:
      containers:
      - name: mcp-server
        image: payments/mcp-server:latest
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
```

---

## 14. Sample Agent Prompts

### 14.1 Core Implementation
> **Prompt**: "Generate the complete MCP server implementation with payment tools for Stripe and Razorpay integration, including idempotency handling, audit logging, and comprehensive error handling."

### 14.2 Security Enhancement
> **Prompt**: "Add PCI-DSS compliant data encryption, rate limiting, and JWT-based authentication to the MCP payment server with proper security headers and input validation."

### 14.3 Monitoring Integration
> **Prompt**: "Implement comprehensive observability with OpenTelemetry tracing, Prometheus metrics, structured logging, and health check endpoints for the MCP payment server."

---

## 15. Compliance & Audit Trail

### 15.1 PCI-DSS Requirements
- [ ] Secure card data handling (tokenization)
- [ ] Network security controls
- [ ] Regular security testing
- [ ] Access control implementation
- [ ] Monitoring and logging
- [ ] Information security policy

### 15.2 Audit Log Schema
```json
{
  "timestamp": "2024-01-15T10:30:00.000Z",
  "correlation_id": "corr_1234567890",
  "user_id": "user_1234567890",
  "action": "payment.create",
  "resource_id": "pay_1234567890",
  "status": "success",
  "client_ip": "192.168.1.100",
  "user_agent": "MCP-Client/1.0",
  "metadata": {
    "amount": 100.00,
    "currency": "USD",
    "provider": "stripe"
  }
}
```

---

## 16. Performance Benchmarks

| Operation | Target Latency | Throughput | Error Rate |
|-----------|----------------|------------|------------|
| Create Payment | < 150ms p95 | 1000 TPS | < 0.1% |
| Verify Payment | < 50ms p95 | 5000 TPS | < 0.01% |
| Wallet Balance | < 25ms p95 | 10000 TPS | < 0.001% |
| Transfer Funds | < 200ms p95 | 500 TPS | < 0.1% |

---

## 17. Version History & Changelog

### [v2.0.0] - 2024-01-15
- **Added**: Enhanced MCP protocol implementation
- **Added**: Multi-provider payment support
- **Added**: Comprehensive security framework
- **Added**: Enterprise observability stack
- **Improved**: Code generation directives
- **Improved**: Documentation structure

### [v1.0.0] - 2024-01-01
- **Initial**: Basic payment server blueprint

---

## 18. License & Governance

**License**: Apache 2.0 License  
**Maintainer**: CodeX Development Team  
**Support**: Enterprise support available  
**Contributing**: See CONTRIBUTING.md for guidelines

---

## 19. 🎯 Implementation Plan:
 - Admin Authentication System
 - Complete Admin Dashboard
 - Full Payment Management UI
 - Wallet Management Interface
 - Subscription Management
 - Audit & Compliance Interface
 - User Management
 - Settings & Configuration

---
## 19. when you test, check everything with docker-compose 

## 🚫 Anti-Patterns to Avoid

- Don't hardcode API endpoints or model names
- Don't ignore configuration validation errors
- Don't mix sync and async code patterns
- Don't create global state that isn't configuration
- Don't write functions longer than 50 lines
- Don't duplicate configuration logic
- Don't hardcode data into UI, It should be dynamic from the backend.



## End of Specification

> This blueprint provides CodeX agents with comprehensive guidance to generate production-ready MCP payment servers that meet enterprise requirements for security, scalability, and maintainability.