# Multi-stage Dockerfile for Groq AI Integration Service
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r app && useradd -r -g app app

# Set working directory
WORKDIR /app

# Development stage
FROM base as development

# Install development dependencies
COPY production/groq_requirements.txt /app/requirements.txt
RUN pip install -r requirements.txt

# Copy application code
COPY production/ /app/production/
COPY app/ /app/app/

# Create logs directory
RUN mkdir -p /app/logs && chown -R app:app /app

# Switch to app user
USER app

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Default command
CMD ["uvicorn", "production.groq_fastapi_server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]

# Production stage
FROM base as production

# Install production dependencies only
COPY production/groq_requirements.txt /app/requirements.txt
RUN pip install -r requirements.txt

# Copy application code
COPY production/ /app/production/
COPY app/ /app/app/

# Create logs directory
RUN mkdir -p /app/logs && chown -R app:app /app

# Remove unnecessary packages
RUN apt-get autoremove -y gcc g++ && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Switch to app user
USER app

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Production command
CMD ["uvicorn", "production.groq_fastapi_server:app", "--host", "0.0.0.0", "--port", "8001", "--workers", "2"] 